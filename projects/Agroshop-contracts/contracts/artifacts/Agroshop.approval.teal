#pragma version 10
intcblock 1 0 8 4 47300
bytecblock 0x

// This TEAL was generated by TEALScript v0.105.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// allowAsset(pay,uint64)void
*abi_route_allowAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// mbrPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (mbrPay) for allowAsset must be a pay transaction
	assert

	// execute allowAsset(pay,uint64)void
	callsub allowAsset
	intc 0 // 1
	return

// allowAsset(mbrPay: PayTxn, asset: AssetID): void
allowAsset:
	proto 2 0

	// contracts\Agroshop.algo.ts:24
	// assert(!this.app.address.isOptedInToAsset(asset))
	global CurrentApplicationAddress
	frame_dig -2 // asset: AssetID
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts\Agroshop.algo.ts:26
	// verifyPayTxn(mbrPay, {
	//       receiver: this.app.address,
	//       amount: globals.assetOptInMinBalance,
	//     })
	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	global AssetOptInMinBalance
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"globals.assetOptInMinBalance"}
	assert

	// contracts\Agroshop.algo.ts:31
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 3 //  axfer
	itxn_field TypeEnum

	// contracts\Agroshop.algo.ts:32
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts\Agroshop.algo.ts:33
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// contracts\Agroshop.algo.ts:34
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// listingDeposit(pay,axfer,uint64,uint64)void
*abi_route_listingDeposit:
	// unitaryPrice: uint64
	txna ApplicationArgs 2
	btoi

	// nonce: uint64
	txna ApplicationArgs 1
	btoi

	// xfer: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  axfer
	==

	// argument 2 (xfer) for listingDeposit must be a axfer transaction
	assert

	// mbrPay: pay
	txn GroupIndex
	pushint 2
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 3 (mbrPay) for listingDeposit must be a pay transaction
	assert

	// execute listingDeposit(pay,axfer,uint64,uint64)void
	callsub listingDeposit
	intc 0 // 1
	return

// listingDeposit(mbrPay: PayTxn, xfer: AssetTransferTxn, nonce: uint64, unitaryPrice: uint64): void
listingDeposit:
	proto 4 0

	// contracts\Agroshop.algo.ts:39
	// assert(!this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).exists)
	txn Sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	box_len
	swap
	pop
	!
	assert

	// contracts\Agroshop.algo.ts:41
	// verifyPayTxn(mbrPay, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: forSaleMbr,
	//     })
	// verify sender
	frame_dig -1 // mbrPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"mbrPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -1 // mbrPay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPay: PayTxn
	gtxns Amount
	intc 4 // 47300
	==

	// transaction verification failed: {"txn":"mbrPay","field":"amount","expected":"forSaleMbr"}
	assert

	// contracts\Agroshop.algo.ts:47
	// verifyAssetTransferTxn(xfer, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThan: 0 },
	//     })
	// verify sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"xfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"xfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetAmount
	intc 1 // 0
	>

	// transaction verification failed: {"txn":"xfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// contracts\Agroshop.algo.ts:53
	// this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).value = {
	//       deposited: xfer.assetAmount,
	//       unitaryPrice: unitaryPrice,
	//     }
	txn Sender
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	frame_dig -2 // xfer: AssetTransferTxn
	gtxns AssetAmount
	itob
	frame_dig -4 // unitaryPrice: uint64
	itob
	concat
	box_put
	retsub

// deposit(axfer,uint64)void
*abi_route_deposit:
	// nonce: uint64
	txna ApplicationArgs 1
	btoi

	// xfer: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  axfer
	==

	// argument 1 (xfer) for deposit must be a axfer transaction
	assert

	// execute deposit(axfer,uint64)void
	callsub deposit
	intc 0 // 1
	return

// deposit(xfer: AssetTransferTxn, nonce: uint64): void
deposit:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// contracts\Agroshop.algo.ts:60
	// assert(this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).exists)
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	box_len
	swap
	pop
	assert

	// contracts\Agroshop.algo.ts:62
	// verifyAssetTransferTxn(xfer, {
	//       sender: this.txn.sender,
	//       assetReceiver: this.app.address,
	//       assetAmount: { greaterThan: 0 },
	//     })
	// verify sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"xfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetReceiver
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"xfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify assetAmount
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetAmount
	intc 1 // 0
	>

	// transaction verification failed: {"txn":"xfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// contracts\Agroshop.algo.ts:68
	// currentDeposited = this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).value
	//       .deposited
	intc 1 // 0
	intc 2 // 8
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts\Agroshop.algo.ts:70
	// currentUnitaryPrice = this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).value
	//       .unitaryPrice
	intc 2 //  headOffset
	intc 2 // 8
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // currentUnitaryPrice: uint64

	// contracts\Agroshop.algo.ts:74
	// this.listings({ owner: this.txn.sender, asset: xfer.xferAsset, nonce: nonce }).value = {
	//       deposited: currentDeposited + xfer.assetAmount,
	//       unitaryPrice: currentUnitaryPrice,
	//     }
	txn Sender
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	frame_dig 0 // currentDeposited: uint64
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetAmount
	+
	itob
	frame_dig 1 // currentUnitaryPrice: uint64
	itob
	concat
	box_put
	retsub

// setPrice(uint64,uint64,uint64)void
*abi_route_setPrice:
	// unitaryPrice: uint64
	txna ApplicationArgs 3
	btoi

	// nonce: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrice(uint64,uint64,uint64)void
	callsub setPrice
	intc 0 // 1
	return

// setPrice(asset: AssetID, nonce: uint64, unitaryPrice: uint64): void
setPrice:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\Agroshop.algo.ts:81
	// currentDeposited = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.deposited
	intc 1 // 0
	intc 2 // 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts\Agroshop.algo.ts:83
	// this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value = {
	//       deposited: currentDeposited,
	//       unitaryPrice: unitaryPrice,
	//     }
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	frame_dig 0 // currentDeposited: uint64
	itob
	frame_dig -3 // unitaryPrice: uint64
	itob
	concat
	box_put
	retsub

// buy(address,uint64,uint64,pay,uint64)void
*abi_route_buy:
	// quantity: uint64
	txna ApplicationArgs 4
	btoi

	// buyPay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 1 (buyPay) for buy must be a pay transaction
	assert

	// nonce: uint64
	txna ApplicationArgs 3
	btoi

	// asset: uint64
	txna ApplicationArgs 2
	btoi

	// owner: address
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 4 (owner) for buy must be a address
	assert

	// execute buy(address,uint64,uint64,pay,uint64)void
	callsub buy
	intc 0 // 1
	return

// buy(owner: Address, asset: AssetID, nonce: uint64, buyPay: PayTxn, quantity: uint64): void
buy:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// contracts\Agroshop.algo.ts:90
	// currentDeposited = this.listings({ owner: owner, asset: asset, nonce: nonce }).value.deposited
	intc 1 // 0
	intc 2 // 8
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts\Agroshop.algo.ts:91
	// currentUnitaryPrice = this.listings({ owner: owner, asset: asset, nonce: nonce }).value.unitaryPrice
	intc 2 //  headOffset
	intc 2 // 8
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // currentUnitaryPrice: uint64

	// contracts\Agroshop.algo.ts:93
	// amountToBePaid = currentUnitaryPrice * quantity
	frame_dig 1 // currentUnitaryPrice: uint64
	frame_dig -5 // quantity: uint64
	*
	frame_bury 2 // amountToBePaid: uint64

	// contracts\Agroshop.algo.ts:95
	// verifyPayTxn(buyPay, {
	//       sender: this.txn.sender,
	//       receiver: owner,
	//     })
	// verify sender
	frame_dig -4 // buyPay: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"buyPay","field":"sender","expected":"this.txn.sender"}
	assert

	// verify receiver
	frame_dig -4 // buyPay: PayTxn
	gtxns Receiver
	frame_dig -1 // owner: Address
	==

	// transaction verification failed: {"txn":"buyPay","field":"receiver","expected":"owner"}
	assert

	// contracts\Agroshop.algo.ts:99
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: quantity,
	//     })
	itxn_begin
	intc 3 //  axfer
	itxn_field TypeEnum

	// contracts\Agroshop.algo.ts:100
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// contracts\Agroshop.algo.ts:101
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\Agroshop.algo.ts:102
	// assetAmount: quantity
	frame_dig -5 // quantity: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Agroshop.algo.ts:105
	// this.listings({ owner: owner, asset: asset, nonce: nonce }).value = {
	//       deposited: currentDeposited - quantity,
	//       unitaryPrice: currentUnitaryPrice,
	//     }
	frame_dig -1 // owner: Address
	frame_dig -2 // asset: AssetID
	itob
	concat
	frame_dig -3 // nonce: uint64
	itob
	concat
	frame_dig 0 // currentDeposited: uint64
	frame_dig -5 // quantity: uint64
	-
	itob
	frame_dig 1 // currentUnitaryPrice: uint64
	itob
	concat
	box_put
	retsub

// withdraw(uint64,uint64)void
*abi_route_withdraw:
	// nonce: uint64
	txna ApplicationArgs 2
	btoi

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute withdraw(uint64,uint64)void
	callsub withdraw
	intc 0 // 1
	return

// withdraw(asset: AssetID, nonce: uint64): void
withdraw:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// contracts\Agroshop.algo.ts:112
	// currentDeposited = this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).value.deposited
	intc 1 // 0
	intc 2 // 8
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // currentDeposited: uint64

	// contracts\Agroshop.algo.ts:114
	// this.listings({ owner: this.txn.sender, asset: asset, nonce: nonce }).delete()
	txn Sender
	frame_dig -1 // asset: AssetID
	itob
	concat
	frame_dig -2 // nonce: uint64
	itob
	concat
	box_del

	// contracts\Agroshop.algo.ts:116
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: forSaleMbr,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\Agroshop.algo.ts:117
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// contracts\Agroshop.algo.ts:118
	// amount: forSaleMbr
	intc 4 // 47300
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\Agroshop.algo.ts:121
	// sendAssetTransfer({
	//       xferAsset: asset,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: currentDeposited,
	//     })
	itxn_begin
	intc 3 //  axfer
	itxn_field TypeEnum

	// contracts\Agroshop.algo.ts:122
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// contracts\Agroshop.algo.ts:123
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts\Agroshop.algo.ts:124
	// assetAmount: currentDeposited
	frame_dig 0 // currentDeposited: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x6a4e7fca // method "allowAsset(pay,uint64)void"
	pushbytes 0x5372d8c2 // method "listingDeposit(pay,axfer,uint64,uint64)void"
	pushbytes 0x9b4b8234 // method "deposit(axfer,uint64)void"
	pushbytes 0x4d8b23d8 // method "setPrice(uint64,uint64,uint64)void"
	pushbytes 0x52ac5df7 // method "buy(address,uint64,uint64,pay,uint64)void"
	pushbytes 0xe3aeb25c // method "withdraw(uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_allowAsset *abi_route_listingDeposit *abi_route_deposit *abi_route_setPrice *abi_route_buy *abi_route_withdraw

	// this contract does not implement the given ABI method for call NoOp
	err