{
  "hints": {
    "allowAsset(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "listingDeposit(pay,axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deposit(axfer,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPrice(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buy(address,uint64,uint64,pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "withdraw(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAgOCA0IDQ3MzAwCmJ5dGVjYmxvY2sgMHgKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuMTA1LjQKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBhbGxvd0Fzc2V0KHBheSx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2FsbG93QXNzZXQ6CgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gbWJyUGF5OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAwIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMSAobWJyUGF5KSBmb3IgYWxsb3dBc3NldCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIGFsbG93QXNzZXQocGF5LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGFsbG93QXNzZXQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFsbG93QXNzZXQobWJyUGF5OiBQYXlUeG4sIGFzc2V0OiBBc3NldElEKTogdm9pZAphbGxvd0Fzc2V0OgoJcHJvdG8gMiAwCgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6MjQKCS8vIGFzc2VydCghdGhpcy5hcHAuYWRkcmVzcy5pc09wdGVkSW5Ub0Fzc2V0KGFzc2V0KSkKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBjb250cmFjdHNcQWdyb3Nob3AuYWxnby50czoyNgoJLy8gdmVyaWZ5UGF5VHhuKG1iclBheSwgewoJLy8gICAgICAgcmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MsCgkvLyAgICAgICBhbW91bnQ6IGdsb2JhbHMuYXNzZXRPcHRJbk1pbkJhbGFuY2UsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSByZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6InJlY2VpdmVyIiwiZXhwZWN0ZWQiOiJ0aGlzLmFwcC5hZGRyZXNzIn0KCWFzc2VydAoKCS8vIHZlcmlmeSBhbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBtYnJQYXk6IFBheVR4bgoJZ3R4bnMgQW1vdW50CglnbG9iYWwgQXNzZXRPcHRJbk1pbkJhbGFuY2UKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJtYnJQYXkiLCJmaWVsZCI6ImFtb3VudCIsImV4cGVjdGVkIjoiZ2xvYmFscy5hc3NldE9wdEluTWluQmFsYW5jZSJ9Cglhc3NlcnQKCgkvLyBjb250cmFjdHNcQWdyb3Nob3AuYWxnby50czozMQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJaW50YyAzIC8vICBheGZlcgoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjMyCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6MzMKCS8vIGFzc2V0QW1vdW50OiAwCglpbnRjIDEgLy8gMAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjM0CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJcmV0c3ViCgovLyBsaXN0aW5nRGVwb3NpdChwYXksYXhmZXIsdWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfbGlzdGluZ0RlcG9zaXQ6CgkvLyB1bml0YXJ5UHJpY2U6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIG5vbmNlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyB4ZmVyOiBheGZlcgoJdHhuIEdyb3VwSW5kZXgKCWludGMgMCAvLyAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDMgLy8gIGF4ZmVyCgk9PQoKCS8vIGFyZ3VtZW50IDIgKHhmZXIpIGZvciBsaXN0aW5nRGVwb3NpdCBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIG1iclBheTogcGF5Cgl0eG4gR3JvdXBJbmRleAoJcHVzaGludCAyCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnRjIDAgLy8gIHBheQoJPT0KCgkvLyBhcmd1bWVudCAzIChtYnJQYXkpIGZvciBsaXN0aW5nRGVwb3NpdCBtdXN0IGJlIGEgcGF5IHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIGxpc3RpbmdEZXBvc2l0KHBheSxheGZlcix1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgbGlzdGluZ0RlcG9zaXQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGxpc3RpbmdEZXBvc2l0KG1iclBheTogUGF5VHhuLCB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuLCBub25jZTogdWludDY0LCB1bml0YXJ5UHJpY2U6IHVpbnQ2NCk6IHZvaWQKbGlzdGluZ0RlcG9zaXQ6Cglwcm90byA0IDAKCgkvLyBjb250cmFjdHNcQWdyb3Nob3AuYWxnby50czozOQoJLy8gYXNzZXJ0KCF0aGlzLmxpc3RpbmdzKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNzZXQ6IHhmZXIueGZlckFzc2V0LCBub25jZTogbm9uY2UgfSkuZXhpc3RzKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0yIC8vIHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFhmZXJBc3NldAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCSEKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjQxCgkvLyB2ZXJpZnlQYXlUeG4obWJyUGF5LCB7CgkvLyAgICAgICBzZW5kZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIHJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgYW1vdW50OiBmb3JTYWxlTWJyLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgc2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFNlbmRlcgoJdHhuIFNlbmRlcgoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoic2VuZGVyIiwiZXhwZWN0ZWQiOiJ0aGlzLnR4bi5zZW5kZXIifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gbWJyUGF5OiBQYXlUeG4KCWd0eG5zIFJlY2VpdmVyCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6InRoaXMuYXBwLmFkZHJlc3MifQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIG1iclBheTogUGF5VHhuCglndHhucyBBbW91bnQKCWludGMgNCAvLyA0NzMwMAoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6Im1iclBheSIsImZpZWxkIjoiYW1vdW50IiwiZXhwZWN0ZWQiOiJmb3JTYWxlTWJyIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjQ3CgkvLyB2ZXJpZnlBc3NldFRyYW5zZmVyVHhuKHhmZXIsIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFzc2V0QW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMiAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBTZW5kZXIKCXR4biBTZW5kZXIKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ4ZmVyIiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0yIC8vIHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoieGZlciIsImZpZWxkIjoiYXNzZXRSZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtMiAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaW50YyAxIC8vIDAKCT4KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InhmZXIiLCJmaWVsZCI6ImFzc2V0QW1vdW50IiwiY29uZGl0aW9uIjoiZ3JlYXRlclRoYW4iLCJleHBlY3RlZCI6Ij4wIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjUzCgkvLyB0aGlzLmxpc3RpbmdzKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNzZXQ6IHhmZXIueGZlckFzc2V0LCBub25jZTogbm9uY2UgfSkudmFsdWUgPSB7CgkvLyAgICAgICBkZXBvc2l0ZWQ6IHhmZXIuYXNzZXRBbW91bnQsCgkvLyAgICAgICB1bml0YXJ5UHJpY2U6IHVuaXRhcnlQcmljZSwKCS8vICAgICB9Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTIgLy8geGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBub25jZTogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaXRvYgoJZnJhbWVfZGlnIC00IC8vIHVuaXRhcnlQcmljZTogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9wdXQKCXJldHN1YgoKLy8gZGVwb3NpdChheGZlcix1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2RlcG9zaXQ6CgkvLyBub25jZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8geGZlcjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAzIC8vICBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAxICh4ZmVyKSBmb3IgZGVwb3NpdCBtdXN0IGJlIGEgYXhmZXIgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIGV4ZWN1dGUgZGVwb3NpdChheGZlcix1aW50NjQpdm9pZAoJY2FsbHN1YiBkZXBvc2l0CglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBkZXBvc2l0KHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4sIG5vbmNlOiB1aW50NjQpOiB2b2lkCmRlcG9zaXQ6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoJZHVwCgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6NjAKCS8vIGFzc2VydCh0aGlzLmxpc3RpbmdzKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNzZXQ6IHhmZXIueGZlckFzc2V0LCBub25jZTogbm9uY2UgfSkuZXhpc3RzKQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFhmZXJBc3NldAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjYyCgkvLyB2ZXJpZnlBc3NldFRyYW5zZmVyVHhuKHhmZXIsIHsKCS8vICAgICAgIHNlbmRlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICAgIGFzc2V0QW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBTZW5kZXIKCXR4biBTZW5kZXIKCT09CgoJLy8gdHJhbnNhY3Rpb24gdmVyaWZpY2F0aW9uIGZhaWxlZDogeyJ0eG4iOiJ4ZmVyIiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRSZWNlaXZlcgoJZnJhbWVfZGlnIC0xIC8vIHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoieGZlciIsImZpZWxkIjoiYXNzZXRSZWNlaXZlciIsImV4cGVjdGVkIjoidGhpcy5hcHAuYWRkcmVzcyJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgYXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBBc3NldEFtb3VudAoJaW50YyAxIC8vIDAKCT4KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6InhmZXIiLCJmaWVsZCI6ImFzc2V0QW1vdW50IiwiY29uZGl0aW9uIjoiZ3JlYXRlclRoYW4iLCJleHBlY3RlZCI6Ij4wIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjY4CgkvLyBjdXJyZW50RGVwb3NpdGVkID0gdGhpcy5saXN0aW5ncyh7IG93bmVyOiB0aGlzLnR4bi5zZW5kZXIsIGFzc2V0OiB4ZmVyLnhmZXJBc3NldCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlCgkvLyAgICAgICAuZGVwb3NpdGVkCglpbnRjIDEgLy8gMAoJaW50YyAyIC8vIDgKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2J1cnkgMCAvLyBjdXJyZW50RGVwb3NpdGVkOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQWdyb3Nob3AuYWxnby50czo3MAoJLy8gY3VycmVudFVuaXRhcnlQcmljZSA9IHRoaXMubGlzdGluZ3MoeyBvd25lcjogdGhpcy50eG4uc2VuZGVyLCBhc3NldDogeGZlci54ZmVyQXNzZXQsIG5vbmNlOiBub25jZSB9KS52YWx1ZQoJLy8gICAgICAgLnVuaXRhcnlQcmljZQoJaW50YyAyIC8vICBoZWFkT2Zmc2V0CglpbnRjIDIgLy8gOAoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHhmZXI6IEFzc2V0VHJhbnNmZXJUeG4KCWd0eG5zIFhmZXJBc3NldAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfYnVyeSAxIC8vIGN1cnJlbnRVbml0YXJ5UHJpY2U6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjc0CgkvLyB0aGlzLmxpc3RpbmdzKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNzZXQ6IHhmZXIueGZlckFzc2V0LCBub25jZTogbm9uY2UgfSkudmFsdWUgPSB7CgkvLyAgICAgICBkZXBvc2l0ZWQ6IGN1cnJlbnREZXBvc2l0ZWQgKyB4ZmVyLmFzc2V0QW1vdW50LAoJLy8gICAgICAgdW5pdGFyeVByaWNlOiBjdXJyZW50VW5pdGFyeVByaWNlLAoJLy8gICAgIH0KCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyB4ZmVyOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBYZmVyQXNzZXQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gY3VycmVudERlcG9zaXRlZDogdWludDY0CglmcmFtZV9kaWcgLTEgLy8geGZlcjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgQXNzZXRBbW91bnQKCSsKCWl0b2IKCWZyYW1lX2RpZyAxIC8vIGN1cnJlbnRVbml0YXJ5UHJpY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfcHV0CglyZXRzdWIKCi8vIHNldFByaWNlKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9zZXRQcmljZToKCS8vIHVuaXRhcnlQcmljZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gbm9uY2U6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHNldFByaWNlKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgc2V0UHJpY2UKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHNldFByaWNlKGFzc2V0OiBBc3NldElELCBub25jZTogdWludDY0LCB1bml0YXJ5UHJpY2U6IHVpbnQ2NCk6IHZvaWQKc2V0UHJpY2U6Cglwcm90byAzIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjgxCgkvLyBjdXJyZW50RGVwb3NpdGVkID0gdGhpcy5saXN0aW5ncyh7IG93bmVyOiB0aGlzLnR4bi5zZW5kZXIsIGFzc2V0OiBhc3NldCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlLmRlcG9zaXRlZAoJaW50YyAxIC8vIDAKCWludGMgMiAvLyA4Cgl0eG4gU2VuZGVyCglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0yIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJY292ZXIgMgoJYm94X2V4dHJhY3QKCWJ0b2kKCWZyYW1lX2J1cnkgMCAvLyBjdXJyZW50RGVwb3NpdGVkOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQWdyb3Nob3AuYWxnby50czo4MwoJLy8gdGhpcy5saXN0aW5ncyh7IG93bmVyOiB0aGlzLnR4bi5zZW5kZXIsIGFzc2V0OiBhc3NldCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlID0gewoJLy8gICAgICAgZGVwb3NpdGVkOiBjdXJyZW50RGVwb3NpdGVkLAoJLy8gICAgICAgdW5pdGFyeVByaWNlOiB1bml0YXJ5UHJpY2UsCgkvLyAgICAgfQoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBub25jZTogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAwIC8vIGN1cnJlbnREZXBvc2l0ZWQ6IHVpbnQ2NAoJaXRvYgoJZnJhbWVfZGlnIC0zIC8vIHVuaXRhcnlQcmljZTogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9wdXQKCXJldHN1YgoKLy8gYnV5KGFkZHJlc3MsdWludDY0LHVpbnQ2NCxwYXksdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9idXk6CgkvLyBxdWFudGl0eTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyA0CglidG9pCgoJLy8gYnV5UGF5OiBwYXkKCXR4biBHcm91cEluZGV4CglpbnRjIDAgLy8gMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50YyAwIC8vICBwYXkKCT09CgoJLy8gYXJndW1lbnQgMSAoYnV5UGF5KSBmb3IgYnV5IG11c3QgYmUgYSBwYXkgdHJhbnNhY3Rpb24KCWFzc2VydAoKCS8vIG5vbmNlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDMKCWJ0b2kKCgkvLyBhc3NldDogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gb3duZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglwdXNoaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDQgKG93bmVyKSBmb3IgYnV5IG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGJ1eShhZGRyZXNzLHVpbnQ2NCx1aW50NjQscGF5LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGJ1eQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gYnV5KG93bmVyOiBBZGRyZXNzLCBhc3NldDogQXNzZXRJRCwgbm9uY2U6IHVpbnQ2NCwgYnV5UGF5OiBQYXlUeG4sIHF1YW50aXR5OiB1aW50NjQpOiB2b2lkCmJ1eToKCXByb3RvIDUgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXBuIDIKCgkvLyBjb250cmFjdHNcQWdyb3Nob3AuYWxnby50czo5MAoJLy8gY3VycmVudERlcG9zaXRlZCA9IHRoaXMubGlzdGluZ3MoeyBvd25lcjogb3duZXIsIGFzc2V0OiBhc3NldCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlLmRlcG9zaXRlZAoJaW50YyAxIC8vIDAKCWludGMgMiAvLyA4CglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfYnVyeSAwIC8vIGN1cnJlbnREZXBvc2l0ZWQ6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjkxCgkvLyBjdXJyZW50VW5pdGFyeVByaWNlID0gdGhpcy5saXN0aW5ncyh7IG93bmVyOiBvd25lciwgYXNzZXQ6IGFzc2V0LCBub25jZTogbm9uY2UgfSkudmFsdWUudW5pdGFyeVByaWNlCglpbnRjIDIgLy8gIGhlYWRPZmZzZXQKCWludGMgMiAvLyA4CglmcmFtZV9kaWcgLTEgLy8gb3duZXI6IEFkZHJlc3MKCWZyYW1lX2RpZyAtMiAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTMgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cgljb3ZlciAyCglib3hfZXh0cmFjdAoJYnRvaQoJZnJhbWVfYnVyeSAxIC8vIGN1cnJlbnRVbml0YXJ5UHJpY2U6IHVpbnQ2NAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjkzCgkvLyBhbW91bnRUb0JlUGFpZCA9IGN1cnJlbnRVbml0YXJ5UHJpY2UgKiBxdWFudGl0eQoJZnJhbWVfZGlnIDEgLy8gY3VycmVudFVuaXRhcnlQcmljZTogdWludDY0CglmcmFtZV9kaWcgLTUgLy8gcXVhbnRpdHk6IHVpbnQ2NAoJKgoJZnJhbWVfYnVyeSAyIC8vIGFtb3VudFRvQmVQYWlkOiB1aW50NjQKCgkvLyBjb250cmFjdHNcQWdyb3Nob3AuYWxnby50czo5NQoJLy8gdmVyaWZ5UGF5VHhuKGJ1eVBheSwgewoJLy8gICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICByZWNlaXZlcjogb3duZXIsCgkvLyAgICAgfSkKCS8vIHZlcmlmeSBzZW5kZXIKCWZyYW1lX2RpZyAtNCAvLyBidXlQYXk6IFBheVR4bgoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoKCS8vIHRyYW5zYWN0aW9uIHZlcmlmaWNhdGlvbiBmYWlsZWQ6IHsidHhuIjoiYnV5UGF5IiwiZmllbGQiOiJzZW5kZXIiLCJleHBlY3RlZCI6InRoaXMudHhuLnNlbmRlciJ9Cglhc3NlcnQKCgkvLyB2ZXJpZnkgcmVjZWl2ZXIKCWZyYW1lX2RpZyAtNCAvLyBidXlQYXk6IFBheVR4bgoJZ3R4bnMgUmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBvd25lcjogQWRkcmVzcwoJPT0KCgkvLyB0cmFuc2FjdGlvbiB2ZXJpZmljYXRpb24gZmFpbGVkOiB7InR4biI6ImJ1eVBheSIsImZpZWxkIjoicmVjZWl2ZXIiLCJleHBlY3RlZCI6Im93bmVyIn0KCWFzc2VydAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjk5CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICB4ZmVyQXNzZXQ6IGFzc2V0LAoJLy8gICAgICAgYXNzZXRSZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYXNzZXRBbW91bnQ6IHF1YW50aXR5LAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6MTAwCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6MTAxCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjEwMgoJLy8gYXNzZXRBbW91bnQ6IHF1YW50aXR5CglmcmFtZV9kaWcgLTUgLy8gcXVhbnRpdHk6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCgkvLyBjb250cmFjdHNcQWdyb3Nob3AuYWxnby50czoxMDUKCS8vIHRoaXMubGlzdGluZ3MoeyBvd25lcjogb3duZXIsIGFzc2V0OiBhc3NldCwgbm9uY2U6IG5vbmNlIH0pLnZhbHVlID0gewoJLy8gICAgICAgZGVwb3NpdGVkOiBjdXJyZW50RGVwb3NpdGVkIC0gcXVhbnRpdHksCgkvLyAgICAgICB1bml0YXJ5UHJpY2U6IGN1cnJlbnRVbml0YXJ5UHJpY2UsCgkvLyAgICAgfQoJZnJhbWVfZGlnIC0xIC8vIG93bmVyOiBBZGRyZXNzCglmcmFtZV9kaWcgLTIgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG5vbmNlOiB1aW50NjQKCWl0b2IKCWNvbmNhdAoJZnJhbWVfZGlnIDAgLy8gY3VycmVudERlcG9zaXRlZDogdWludDY0CglmcmFtZV9kaWcgLTUgLy8gcXVhbnRpdHk6IHVpbnQ2NAoJLQoJaXRvYgoJZnJhbWVfZGlnIDEgLy8gY3VycmVudFVuaXRhcnlQcmljZTogdWludDY0CglpdG9iCgljb25jYXQKCWJveF9wdXQKCXJldHN1YgoKLy8gd2l0aGRyYXcodWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfd2l0aGRyYXc6CgkvLyBub25jZTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYXNzZXQ6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgd2l0aGRyYXcodWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIHdpdGhkcmF3CglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyB3aXRoZHJhdyhhc3NldDogQXNzZXRJRCwgbm9uY2U6IHVpbnQ2NCk6IHZvaWQKd2l0aGRyYXc6Cglwcm90byAyIDAKCgkvLyBQdXNoIGVtcHR5IGJ5dGVzIGFmdGVyIHRoZSBmcmFtZSBwb2ludGVyIHRvIHJlc2VydmUgc3BhY2UgZm9yIGxvY2FsIHZhcmlhYmxlcwoJYnl0ZWMgMCAvLyAweAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjExMgoJLy8gY3VycmVudERlcG9zaXRlZCA9IHRoaXMubGlzdGluZ3MoeyBvd25lcjogdGhpcy50eG4uc2VuZGVyLCBhc3NldDogYXNzZXQsIG5vbmNlOiBub25jZSB9KS52YWx1ZS5kZXBvc2l0ZWQKCWludGMgMSAvLyAwCglpbnRjIDIgLy8gOAoJdHhuIFNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBub25jZTogdWludDY0CglpdG9iCgljb25jYXQKCWNvdmVyIDIKCWJveF9leHRyYWN0CglidG9pCglmcmFtZV9idXJ5IDAgLy8gY3VycmVudERlcG9zaXRlZDogdWludDY0CgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6MTE0CgkvLyB0aGlzLmxpc3RpbmdzKHsgb3duZXI6IHRoaXMudHhuLnNlbmRlciwgYXNzZXQ6IGFzc2V0LCBub25jZTogbm9uY2UgfSkuZGVsZXRlKCkKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogQXNzZXRJRAoJaXRvYgoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gbm9uY2U6IHVpbnQ2NAoJaXRvYgoJY29uY2F0Cglib3hfZGVsCgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6MTE2CgkvLyBzZW5kUGF5bWVudCh7CgkvLyAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgYW1vdW50OiBmb3JTYWxlTWJyLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDAgLy8gIHBheQoJaXR4bl9maWVsZCBUeXBlRW51bQoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjExNwoJLy8gcmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlcgoJdHhuIFNlbmRlcgoJaXR4bl9maWVsZCBSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjExOAoJLy8gYW1vdW50OiBmb3JTYWxlTWJyCglpbnRjIDQgLy8gNDczMDAKCWl0eG5fZmllbGQgQW1vdW50CgoJLy8gRmVlIGZpZWxkIG5vdCBzZXQsIGRlZmF1bHRpbmcgdG8gMAoJaW50YyAxIC8vIDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjEyMQoJLy8gc2VuZEFzc2V0VHJhbnNmZXIoewoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIGFzc2V0QW1vdW50OiBjdXJyZW50RGVwb3NpdGVkLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnRjIDMgLy8gIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6MTIyCgkvLyB4ZmVyQXNzZXQ6IGFzc2V0CglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IEFzc2V0SUQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gY29udHJhY3RzXEFncm9zaG9wLmFsZ28udHM6MTIzCgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGNvbnRyYWN0c1xBZ3Jvc2hvcC5hbGdvLnRzOjEyNAoJLy8gYXNzZXRBbW91bnQ6IGN1cnJlbnREZXBvc2l0ZWQKCWZyYW1lX2RpZyAwIC8vIGN1cnJlbnREZXBvc2l0ZWQ6IHVpbnQ2NAoJaXR4bl9maWVsZCBBc3NldEFtb3VudAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCWludGMgMCAvLyAxCglyZXR1cm4KCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHg2YTRlN2ZjYSAvLyBtZXRob2QgImFsbG93QXNzZXQocGF5LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NTM3MmQ4YzIgLy8gbWV0aG9kICJsaXN0aW5nRGVwb3NpdChwYXksYXhmZXIsdWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4OWI0YjgyMzQgLy8gbWV0aG9kICJkZXBvc2l0KGF4ZmVyLHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NGQ4YjIzZDggLy8gbWV0aG9kICJzZXRQcmljZSh1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NTJhYzVkZjcgLy8gbWV0aG9kICJidXkoYWRkcmVzcyx1aW50NjQsdWludDY0LHBheSx1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGUzYWViMjVjIC8vIG1ldGhvZCAid2l0aGRyYXcodWludDY0LHVpbnQ2NCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9hbGxvd0Fzc2V0ICphYmlfcm91dGVfbGlzdGluZ0RlcG9zaXQgKmFiaV9yb3V0ZV9kZXBvc2l0ICphYmlfcm91dGVfc2V0UHJpY2UgKmFiaV9yb3V0ZV9idXkgKmFiaV9yb3V0ZV93aXRoZHJhdwoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Agroshop",
    "desc": "",
    "methods": [
      {
        "name": "allowAsset",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "asset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "listingDeposit",
        "args": [
          {
            "name": "mbrPay",
            "type": "pay"
          },
          {
            "name": "xfer",
            "type": "axfer"
          },
          {
            "name": "nonce",
            "type": "uint64"
          },
          {
            "name": "unitaryPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deposit",
        "args": [
          {
            "name": "xfer",
            "type": "axfer"
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPrice",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "nonce",
            "type": "uint64"
          },
          {
            "name": "unitaryPrice",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "buy",
        "args": [
          {
            "name": "owner",
            "type": "address"
          },
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "nonce",
            "type": "uint64"
          },
          {
            "name": "buyPay",
            "type": "pay"
          },
          {
            "name": "quantity",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "withdraw",
        "args": [
          {
            "name": "asset",
            "type": "uint64"
          },
          {
            "name": "nonce",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}